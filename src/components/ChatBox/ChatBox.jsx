import React, { useState, useRef, useEffect } from 'react';
import './ChatBox.css';
import chatService from '../../services/chatService';

const ChatBox = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [message, setMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([
    { role: 'bot', content: 'ü§ñ Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI Eyespire. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüîç T√¨m ki·∫øm th√¥ng tin v·ªÅ l·ªãch h·∫πn c·ªßa b·∫°n\nüìã Xem h·ªì s∆° b·ªánh √°n v√† k·∫øt qu·∫£ kh√°m\nüõçÔ∏è T√¨m s·∫£n ph·∫©m, thu·ªëc, k√≠nh m·∫Øt ph√π h·ª£p\nüí¨ T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ m·∫Øt\n\nH√£y th·ª≠ h·ªèi: "L·ªãch h·∫πn c·ªßa t√¥i h√¥m nay" ho·∫∑c "Thu·ªëc nh·ªè m·∫Øt n√†o ph√π h·ª£p?"', id: Date.now() }
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [speakingMessageId, setSpeakingMessageId] = useState(null);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [suggestions] = useState(chatService.getSuggestedQueries());
  const chatContainerRef = useRef(null);
  const inputRef = useRef(null);
  const recognitionRef = useRef(null);

  // Cu·ªôn xu·ªëng d∆∞·ªõi c√πng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  // Focus v√†o input khi m·ªü chatbox
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  // Kh·ªüi t·∫°o Web Speech API
  useEffect(() => {
    // Ki·ªÉm tra tr√¨nh duy·ªát c√≥ h·ªó tr·ª£ Speech Recognition kh√¥ng
    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'vi-VN'; // Ng√¥n ng·ªØ ti·∫øng Vi·ªát
      
      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setMessage(transcript);
        setIsListening(false);
      };
      
      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error', event.error);
        setIsListening(false);
      };
      
      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
    
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.abort();
      }
    };
  }, []);

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const handleInputChange = (e) => {
    setMessage(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!message.trim()) return;
    
    // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    const userMessage = { role: 'user', content: message, id: Date.now(), timestamp: new Date() };
    setChatHistory([...chatHistory, userMessage]);
    const currentMessage = message;
    setMessage('');
    setIsLoading(true);
    setShowSuggestions(false);
    
    try {
      // G·ª≠i tin nh·∫Øn ƒë·∫øn API v√† nh·∫≠n ph·∫£n h·ªìi v·ªõi AI capabilities
      const response = await chatService.sendMessage(currentMessage);
      
      // Format response v·ªõi emoji v√† styling
      const formattedResponse = chatService.formatResponse(response);
      
      // Th√™m ph·∫£n h·ªìi t·ª´ bot v√†o l·ªãch s·ª≠
      const botMessage = { 
        role: 'bot', 
        content: formattedResponse, 
        id: Date.now(),
        timestamp: new Date(),
        isAIQuery: response.isAIQuery,
        success: response.success
      };
      setChatHistory(prev => [...prev, botMessage]);
      
      // Log AI query detection
      if (response.isAIQuery) {
        console.log('ü§ñ AI Query detected and processed:', currentMessage);
      }
      
    } catch (error) {
      console.error('Error:', error);
      // Th√™m th√¥ng b√°o l·ªói v√†o l·ªãch s·ª≠
      const errorMessage = { 
        role: 'bot', 
        content: '‚ùå Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
        id: Date.now(),
        timestamp: new Date(),
        success: false
      };
      setChatHistory(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω click suggestion
  const handleSuggestionClick = (query) => {
    setMessage(query);
    setShowSuggestions(false);
    // Auto submit suggestion
    setTimeout(() => {
      const event = { preventDefault: () => {} };
      handleSubmit(event);
    }, 100);
  };

  // Toggle suggestions
  const toggleSuggestions = () => {
    setShowSuggestions(!showSuggestions);
  };

  // B·∫Øt ƒë·∫ßu ghi √¢m
  const startListening = () => {
    if (recognitionRef.current) {
      try {
        recognitionRef.current.start();
        setIsListening(true);
      } catch (error) {
        console.error('Speech recognition error:', error);
      }
    } else {
      alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i.');
    }
  };

  // D·ª´ng ghi √¢m
  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  // ƒê·ªçc vƒÉn b·∫£n c·ª• th·ªÉ
  const speakMessage = (text, messageId) => {
    if ('speechSynthesis' in window) {
      // N·∫øu ƒëang ƒë·ªçc tin nh·∫Øn n√†y, d·ª´ng l·∫°i
      if (speakingMessageId === messageId) {
        window.speechSynthesis.cancel();
        setSpeakingMessageId(null);
        return;
      }
      
      // D·ª´ng t·∫•t c·∫£ c√°c ph√°t √¢m ƒëang di·ªÖn ra
      window.speechSynthesis.cancel();
      
      // ƒê·∫∑t ID tin nh·∫Øn ƒëang ƒë·ªçc
      setSpeakingMessageId(messageId);
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Thi·∫øt l·∫≠p ng√¥n ng·ªØ ti·∫øng Vi·ªát
      utterance.lang = 'vi-VN';
      
      // T√πy ch·ªânh gi·ªçng n√≥i
      utterance.volume = 1; // 0 ƒë·∫øn 1
      utterance.rate = 1.0; // 0.1 ƒë·∫øn 10
      utterance.pitch = 1.0; // 0 ƒë·∫øn 2
      
      // X·ª≠ l√Ω s·ª± ki·ªán
      utterance.onstart = () => console.log('B·∫Øt ƒë·∫ßu ƒë·ªçc');
      utterance.onend = () => {
        console.log('ƒê·ªçc xong');
        setSpeakingMessageId(null);
      };
      utterance.onerror = (e) => {
        console.error('L·ªói khi ƒë·ªçc:', e);
        setSpeakingMessageId(null);
      };
      
      // Ki·ªÉm tra v√† ch·ªçn gi·ªçng ti·∫øng Vi·ªát n·∫øu c√≥
      setTimeout(() => {
        const voices = window.speechSynthesis.getVoices();
        const viVoice = voices.find(voice => voice.lang.includes('vi') || voice.name.includes('Vietnamese'));
        if (viVoice) {
          utterance.voice = viVoice;
        }
        
        // Ph√°t √¢m
        window.speechSynthesis.speak(utterance);
      }, 100); // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o voices ƒë√£ ƒë∆∞·ª£c t·∫£i
    } else {
      console.error('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Text-to-Speech');
    }
  };

  // H√†m ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian tin nh·∫Øn
  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
  };

  return (
    <div className="aibox-chat-box-container">
      {/* N√∫t chat */}
      <button 
        className={`aibox-chat-button ${isOpen ? 'active' : ''}`} 
        onClick={toggleChat}
        aria-label={isOpen ? 'ƒê√≥ng chat' : 'M·ªü chat'}
      >
        <div className="aibox-chat-button-content">
          {!isOpen && (
            <>
              <i className="fas fa-comments"></i>
              <span className="aibox-chat-button-text">Chat v·ªõi AI</span>
            </>
          )}
          {isOpen && <i className="fas fa-times"></i>}
        </div>
      </button>

      {/* H·ªôp chat */}
      <div className={`aibox-chat-container ${isOpen ? 'open' : ''}`}>
        <div className="aibox-chat-header">
          <div className="aibox-chat-title">
            <div className="aibox-chat-logo">
              <i className="fas fa-eye"></i>
            </div>
            <div className="aibox-chat-title-text">
              <h3>Eyespire Assistant</h3>
              <div className="aibox-chat-status">
                <span className="aibox-status-dot"></span>
                ƒêang ho·∫°t ƒë·ªông
              </div>
            </div>
          </div>
          <div className="aibox-header-actions">
            <button 
              className="aibox-minimize-button" 
              onClick={toggleChat}
              aria-label="Thu nh·ªè chat"
            >
              <i className="fas fa-minus"></i>
            </button>
            <button 
              className="aibox-close-button" 
              onClick={toggleChat}
              aria-label="ƒê√≥ng chat"
            >
              <i className="fas fa-times"></i>
            </button>
          </div>
        </div>
        
        <div className="aibox-chat-messages" ref={chatContainerRef}>
          {chatHistory.map((chat) => (
            <div 
              key={chat.id} 
              className={`aibox-message ${chat.role === 'user' ? 'aibox-user-message' : 'aibox-bot-message'}`}
            >
              {chat.role === 'bot' && (
                <div className="aibox-bot-avatar">
                  <i className="fas fa-eye"></i>
                </div>
              )}
              <div className="aibox-message-bubble">
                <div className="aibox-message-content">
                  {chat.content}
                </div>
                <div className="aibox-message-footer">
                  <div className="aibox-message-time">
                    {getCurrentTime()}
                  </div>
                  {chat.role === 'bot' && (
                    <button 
                      className={`aibox-message-speak-button ${speakingMessageId === chat.id ? 'speaking' : ''}`}
                      onClick={() => speakMessage(chat.content, chat.id)}
                      aria-label={speakingMessageId === chat.id ? "D·ª´ng ƒë·ªçc tin nh·∫Øn" : "ƒê·ªçc tin nh·∫Øn n√†y"}
                      title={speakingMessageId === chat.id ? "D·ª´ng ƒë·ªçc tin nh·∫Øn" : "ƒê·ªçc tin nh·∫Øn n√†y"}
                    >
                      <i className={`fas ${speakingMessageId === chat.id ? 'fa-volume-mute' : 'fa-volume-up'}`}></i>
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="aibox-message aibox-bot-message">
              <div className="aibox-bot-avatar">
                <i className="fas fa-eye"></i>
              </div>
              <div className="aibox-message-bubble">
                <div className="aibox-message-content aibox-typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* AI Suggestions Panel */}
        {showSuggestions && (
          <div className="aibox-suggestions-panel">
            <div className="aibox-suggestions-header">
              <span>ü§ñ G·ª£i √Ω c√¢u h·ªèi th√¥ng minh</span>
              <button 
                type="button" 
                className="aibox-suggestions-close"
                onClick={toggleSuggestions}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
            <div className="aibox-suggestions-content">
              {suggestions.map((category, categoryIndex) => (
                <div key={categoryIndex} className="aibox-suggestion-category">
                  <h4 className="aibox-category-title">{category.category}</h4>
                  <div className="aibox-suggestion-list">
                    {category.queries.map((query, queryIndex) => (
                      <button
                        key={queryIndex}
                        type="button"
                        className="aibox-suggestion-item"
                        onClick={() => handleSuggestionClick(query)}
                      >
                        <i className="fas fa-lightbulb"></i>
                        {query}
                      </button>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        <div className="aibox-chat-footer">
          <div className="aibox-input-actions">
            <button
              type="button"
              className={`aibox-suggestions-button ${showSuggestions ? 'active' : ''}`}
              onClick={toggleSuggestions}
              title="Hi·ªÉn th·ªã g·ª£i √Ω c√¢u h·ªèi"
            >
              <i className="fas fa-lightbulb"></i>
            </button>
          </div>
          <form className="aibox-chat-input-container" onSubmit={handleSubmit}>
            <input
              ref={inputRef}
              type="text"
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              value={message}
              onChange={handleInputChange}
              disabled={isLoading || isListening}
              className="aibox-chat-input"
            />
            <button
              type="button"
              className={`aibox-mic-button ${isListening ? 'listening' : ''}`}
              onClick={isListening ? stopListening : startListening}
              disabled={isLoading}
              aria-label={isListening ? 'D·ª´ng ghi √¢m' : 'B·∫Øt ƒë·∫ßu ghi √¢m'}
              title={isListening ? 'D·ª´ng ghi √¢m' : 'B·∫Øt ƒë·∫ßu ghi √¢m'}
            >
              <i className={`fas ${isListening ? 'fa-stop' : 'fa-microphone'}`}></i>
            </button>
            <button 
              type="submit" 
              disabled={isLoading || !message.trim() || isListening} 
              className="aibox-send-button"
              aria-label="G·ª≠i tin nh·∫Øn"
            >
              <i className="fas fa-paper-plane"></i>
            </button>
          </form>
          <div className="aibox-chat-footer-text">
            Powered by Eyespire Assistant
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatBox;
