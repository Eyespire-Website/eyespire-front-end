"use client"

import React, {useState, useEffect} from "react"
import "./doctor.css"
import {useNavigate} from "react-router-dom";

export default function DoctorDashboard() {
    const [doctorData, setDoctorData] = useState({
        email: "doctor.vupa@gmail.com",
        fullname: "Phan Anh V≈©",
        phone: "0352195870",
        gender: "male",
        specialization: "ChƒÉm s√≥c s·ª©c kh·ªèe c√° nh√¢n",
        licenseNumber: "ABC-GSH-WH5",
        experience: "3",
        address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
        bio: "Xin ch√†o! T√¥i l√† b√°c sƒ© th√∫ y chuy√™n v·ªÅ chƒÉm s√≥c v√† ƒëi·ªÅu tr·ªã c√° Koi, v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c n√†y. T√¥i ƒë√£ l√†m vi·ªác v·ªõi r·∫•t nhi·ªÅu h·ªì c√° Koi t·ª´ quy m√¥ gia ƒë√¨nh ƒë·∫øn th∆∞∆°ng m·∫°i, hi·ªÉu r√µ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe th∆∞·ªùng g·∫∑p nh∆∞ nhi·ªÖm khu·∫©n, k√Ω sinh tr√πng, hay c√°c v·∫•n ƒë·ªÅ m√¥i tr∆∞·ªùng nh∆∞ pH v√† n·ªìng ƒë·ªô oxy trong h·ªì. M·ªói ch√∫ c√° Koi ƒë·ªÅu l√† m·ªôt ki·ªát t√°c thi√™n nhi√™n, v√† t√¥i cam k·∫øt mang ƒë·∫øn d·ªãch v·ª• t·ªët nh·∫•t ƒë·ªÉ b·∫£o v·ªá s·ª©c kh·ªèe v√† v·∫ª ƒë·∫πp c·ªßa ch√∫ng. H√£y ƒë·ªÉ t√¥i ƒë·ªìng h√†nh c√πng b·∫°n trong vi·ªác x√¢y d·ª±ng v√† duy tr√¨ m√¥i tr∆∞·ªùng l√Ω t∆∞·ªüng cho ƒë√†n c√° Koi y√™u qu√Ω c·ªßa b·∫°n.",
        provinceCode: "",
        districtCode: "",
        wardCode: "",
    })
    const navigate = useNavigate();
    const [provinces, setProvinces] = useState([])
    const [districts, setDistricts] = useState([])
    const [wards, setWards] = useState([])
    const [locationLoading, setLocationLoading] = useState(false)
    const [saving, setSaving] = useState(false)
    const [showPasswordModal, setShowPasswordModal] = useState(false)
    const [passwordData, setPasswordData] = useState({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
    })
    const [passwordError, setPasswordError] = useState("")
    const [selectedFile, setSelectedFile] = useState(null)
    const [previewUrl, setPreviewUrl] = useState("")

    const handleInputChange = (e) => {
        const {name, value} = e.target
        setDoctorData((prev) => ({
            ...prev,
            [name]: value,
        }))
    }

    const handleSave = async () => {
        try {
            setSaving(true)
            console.log("Saving doctor data:", doctorData)
            // Simulate API call
            await new Promise((resolve) => setTimeout(resolve, 1000))
            alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!")
        } catch (error) {
            console.error("Error saving:", error)
            alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin!")
        } finally {
            setSaving(false)
        }
    }

    // Fetch provinces on component mount
    useEffect(() => {
        const fetchProvinces = async () => {
            try {
                setLocationLoading(true)
                const response = await fetch("https://provinces.open-api.vn/api/p/")
                const data = await response.json()
                setProvinces(data)
            } catch (error) {
                console.error("Error fetching provinces:", error)
            } finally {
                setLocationLoading(false)
            }
        }
        fetchProvinces()
    }, [])

    // Fetch districts when province changes
    const fetchDistricts = async (provinceCode) => {
        try {
            setLocationLoading(true)
            const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`)
            const data = await response.json()
            setDistricts(data.districts)
        } catch (error) {
            console.error("Error fetching districts:", error)
        } finally {
            setLocationLoading(false)
        }
    }

    // Fetch wards when district changes
    const fetchWards = async (districtCode) => {
        try {
            setLocationLoading(true)
            const response = await fetch(`https://provinces.open-api.vn/api/d/${districtCode}?depth=2`)
            const data = await response.json()
            setWards(data.wards)
        } catch (error) {
            console.error("Error fetching wards:", error)
        } finally {
            setLocationLoading(false)
        }
    }

    // Handle province change
    const handleProvinceChange = (e) => {
        const provinceCode = e.target.value
        setDoctorData((prev) => ({
            ...prev,
            provinceCode,
            districtCode: "",
            wardCode: "",
        }))
        setDistricts([])
        setWards([])

        if (provinceCode) {
            fetchDistricts(provinceCode)
        }
    }

    // Handle district change
    const handleDistrictChange = (e) => {
        const districtCode = e.target.value
        setDoctorData((prev) => ({
            ...prev,
            districtCode,
            wardCode: "",
        }))
        setWards([])

        if (districtCode) {
            fetchWards(districtCode)
        }
    }

    // Handle file change for avatar
    const handleFileChange = (e) => {
        const file = e.target.files[0]
        if (file) {
            setSelectedFile(file)
            const fileReader = new FileReader()
            fileReader.onload = () => {
                setPreviewUrl(fileReader.result)
            }
            fileReader.readAsDataURL(file)
        }
    }

    // Handle avatar upload
    const handleAvatarUpload = async () => {
        if (!selectedFile) {
            alert("Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc khi t·∫£i l√™n")
            return
        }

        try {
            setSaving(true)
            // Simulate upload
            await new Promise((resolve) => setTimeout(resolve, 1000))
            setSelectedFile(null)
            alert("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!")
        } catch (error) {
            console.error("Error uploading avatar:", error)
            alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán!")
        } finally {
            setSaving(false)
        }
    }

    // Handle password change
    const handlePasswordChange = (e) => {
        const {name, value} = e.target
        setPasswordData((prev) => ({
            ...prev,
            [name]: value,
        }))
        if (passwordError) setPasswordError("")
    }

    const handlePasswordSubmit = async () => {
        if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {
            setPasswordError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
            return
        }

        if (passwordData.newPassword !== passwordData.confirmPassword) {
            setPasswordError("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp")
            return
        }

        if (passwordData.newPassword.length < 6) {
            setPasswordError("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
            return
        }

        try {
            // Simulate password change
            await new Promise((resolve) => setTimeout(resolve, 1000))
            setPasswordData({
                currentPassword: "",
                newPassword: "",
                confirmPassword: "",
            })
            setShowPasswordModal(false)
            alert("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!")
        } catch (error) {
            console.error("Error changing password:", error)
            setPasswordError("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau")
        }
    }

    return (
        <div className="profile-content-wrapper">
            <header className="profile-header">
                <h1>H·ªì s∆° c√° nh√¢n</h1>
            </header>

            <div className="profile-content">
                {/* Left Section - Avatar */}
                <div className="profile-left">
                    <div className="profile-avatar-container">
                        <div className="profile-avatar-large">
                            {previewUrl ? (
                                <img src={previewUrl || "/placeholder.svg"} alt="Avatar" className="avatar-image"/>
                            ) : (
                                doctorData.fullname.charAt(0) || "P"
                            )}
                            <label htmlFor="avatar-upload" className="change-avatar-btn">
                                <span className="camera-icon">üì∑</span>
                            </label>
                            <input
                                type="file"
                                id="avatar-upload"
                                onChange={handleFileChange}
                                accept="image/*"
                                style={{display: "none"}}
                            />
                        </div>
                        {selectedFile && (
                            <button className="upload-avatar-btn" onClick={handleAvatarUpload} disabled={saving}>
                                {saving ? "ƒêang t·∫£i l√™n..." : "L∆∞u ·∫£nh"}
                            </button>
                        )}
                    </div>

                    <div className="profile-info">
                        <h3>{doctorData.fullname}</h3>
                        <p className="user-email">{doctorData.email}</p>
                        <div className="user-badge">DOCTOR</div>
                    </div>

                    <button className="edit-profile-btn" onClick={() => setShowPasswordModal(true)}>
                        <span className="password-icon">üîí</span> Thay ƒë·ªïi m·∫≠t kh·∫©u ·ªü ƒë√¢y!
                    </button>
                </div>

                {/* Center Section - Form Fields */}
                <div className="profile-center">
                    <div className="form-grid">
                        <div className="form-group">
                            <label>
                                Email <span className="required">*</span>
                            </label>
                            <input
                                type="email"
                                name="email"
                                value={doctorData.email}
                                onChange={handleInputChange}
                                className="form-control readonly"
                                readOnly
                            />
                        </div>

                        <div className="form-group">
                            <label>Ch·ª©ng ch·ªâ</label>
                            <input
                                type="text"
                                name="specialization"
                                value={doctorData.specialization}
                                onChange={handleInputChange}
                                className="form-control"
                            />
                        </div>

                        <div className="form-group">
                            <label>
                                H·ªç v√† t√™n <span className="required">*</span>
                            </label>
                            <input
                                type="text"
                                name="fullname"
                                value={doctorData.fullname}
                                onChange={handleInputChange}
                                className="form-control"
                            />
                        </div>

                        <div className="form-group">
                            <label>M√£ s·ªë ch·ª©ng ch·ªâ</label>
                            <input
                                type="text"
                                name="licenseNumber"
                                value={doctorData.licenseNumber}
                                onChange={handleInputChange}
                                className="form-control"
                            />
                        </div>

                        <div className="form-group">
                            <label>
                                S·ªë ƒëi·ªán tho·∫°i <span className="required">*</span>
                            </label>
                            <div className="phone-input">
                                <div className="phone-prefix">+84</div>
                                <input
                                    type="text"
                                    name="phone"
                                    value={doctorData.phone}
                                    onChange={handleInputChange}
                                    className="form-control"
                                />
                            </div>
                        </div>

                        <div className="form-group">
                            <label>
                                Gi·ªõi t√≠nh <span className="required">*</span>
                            </label>
                            <select name="gender" value={doctorData.gender} onChange={handleInputChange}
                                    className="form-control">
                                <option value="male">Nam</option>
                                <option value="female">N·ªØ</option>
                                <option value="other">Kh√°c</option>
                            </select>
                        </div>

                        <div className="form-group">
                            <label>NƒÉm kinh nghi·ªám</label>
                            <select
                                name="experience"
                                value={doctorData.experience}
                                onChange={handleInputChange}
                                className="form-control"
                            >
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="5">5</option>
                                <option value="10">10+</option>
                            </select>
                        </div>

                        <div className="form-group">
                            <label>T·ªânh/Th√†nh ph·ªë</label>
                            <select
                                name="provinceCode"
                                value={doctorData.provinceCode}
                                onChange={handleProvinceChange}
                                className="form-control"
                                disabled={locationLoading}
                            >
                                <option value="">-- Ch·ªçn T·ªânh/Th√†nh ph·ªë --</option>
                                {provinces.map((province) => (
                                    <option key={province.code} value={province.code}>
                                        {province.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="form-group">
                            <label>Qu·∫≠n/Huy·ªán</label>
                            <select
                                name="districtCode"
                                value={doctorData.districtCode}
                                onChange={handleDistrictChange}
                                className="form-control"
                                disabled={!doctorData.provinceCode || locationLoading}
                            >
                                <option value="">-- Ch·ªçn Qu·∫≠n/Huy·ªán --</option>
                                {districts.map((district) => (
                                    <option key={district.code} value={district.code}>
                                        {district.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="form-group">
                            <label>Ph∆∞·ªùng/X√£</label>
                            <select
                                name="wardCode"
                                value={doctorData.wardCode}
                                onChange={handleInputChange}
                                className="form-control"
                                disabled={!doctorData.districtCode || locationLoading}
                            >
                                <option value="">-- Ch·ªçn Ph∆∞·ªùng/X√£ --</option>
                                {wards.map((ward) => (
                                    <option key={ward.code} value={ward.code}>
                                        {ward.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        <div className="form-group full-width">
                            <label>ƒê·ªãa ch·ªâ</label>
                            <input
                                type="text"
                                name="address"
                                value={doctorData.address}
                                onChange={handleInputChange}
                                className="form-control"
                            />
                        </div>
                    </div>
                </div>

                {/* Right Section - Bio */}
                <div className="profile-right">
                    <div className="bio-section">
                        <label>
                            Gi·ªõi thi·ªáu <span className="optional">(T√πy ch·ªçn)</span>
                        </label>
                        <textarea
                            name="bio"
                            value={doctorData.bio}
                            onChange={handleInputChange}
                            className="bio-textarea"
                            placeholder="M√¥ t·∫£ v·ªÅ kinh nghi·ªám, chuy√™n m√¥n v√† ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã c·ªßa b·∫°n..."
                        />
                    </div>
                </div>
            </div>

            <div className="form-actions">
                <button className="save-button" onClick={handleSave} disabled={saving}>
                    {saving ? "ƒêang l∆∞u..." : "C·∫≠p nh·∫≠t"}
                </button>
            </div>

            {/* Password Change Modal */}
            {showPasswordModal && (
                <div className="modal-overlay">
                    <div className="modal-container">
                        <div className="modal-header">
                            <h3>Thay ƒë·ªïi m·∫≠t kh·∫©u</h3>
                            <button className="close-modal" onClick={() => setShowPasswordModal(false)}>
                                √ó
                            </button>
                        </div>
                        <div className="modal-body">
                            {passwordError && <div className="error-message">{passwordError}</div>}
                            <div className="form-group">
                                <label>M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
                                <input
                                    type="password"
                                    name="currentPassword"
                                    value={passwordData.currentPassword}
                                    onChange={handlePasswordChange}
                                    className="form-control"
                                />
                            </div>
                            <div className="form-group">
                                <label>M·∫≠t kh·∫©u m·ªõi</label>
                                <input
                                    type="password"
                                    name="newPassword"
                                    value={passwordData.newPassword}
                                    onChange={handlePasswordChange}
                                    className="form-control"
                                />
                            </div>
                            <div className="form-group">
                                <label>X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                                <input
                                    type="password"
                                    name="confirmPassword"
                                    value={passwordData.confirmPassword}
                                    onChange={handlePasswordChange}
                                    className="form-control"
                                />
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button className="cancel-button" onClick={() => setShowPasswordModal(false)}>
                                H·ªßy
                            </button>
                            <button className="save-button" onClick={handlePasswordSubmit}>
                                L∆∞u thay ƒë·ªïi
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}
