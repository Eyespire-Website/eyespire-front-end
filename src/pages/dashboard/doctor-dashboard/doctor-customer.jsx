"use client"

import { useState, useEffect } from "react"
import { useNavigate, useParams } from "react-router-dom"
import "./doctor-customer.css"
import { Search, Eye, Edit, Save, User, Phone, Mail, Calendar, Plus } from "lucide-react"

export default function CustomerProfile() {
    const [activeTab, setActiveTab] = useState("customers")
    const [activeSection, setActiveSection] = useState("info")
    const navigate = useNavigate()
    const { id } = useParams()
    const [loading, setLoading] = useState(false)
    const [customers, setCustomers] = useState([])
    const [selectedCustomer, setSelectedCustomer] = useState(null)
    const [searchTerm, setSearchTerm] = useState("")
    const [editMode, setEditMode] = useState(false)
    const [editedCustomer, setEditedCustomer] = useState(null)

    // Fetch customers on component mount
    useEffect(() => {
        const fetchCustomers = async () => {
            try {
                setLoading(true)
                // Simulate API call
                await new Promise((resolve) => setTimeout(resolve, 500))

                // Sample data
                const sampleCustomers = [
                    {
                        id: 1,
                        name: "ƒê·ªó VƒÉn D≈©ng",
                        phone: "0352195878",
                        email: "dvdung@gmail.com",
                        gender: "Nam",
                        address: "123 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM",
                        registeredDate: "15/06/2023",
                        appointments: [
                            {
                                id: 101,
                                date: "23/11/2024",
                                time: "8:00",
                                service: "X√©t nghi·ªám k√Ω sinh tr√πng",
                                status: "completed",
                                notes: "Ph√°t hi·ªán k√Ω sinh tr√πng, ƒë√£ ƒëi·ªÅu tr·ªã",
                            },
                            {
                                id: 102,
                                date: "15/10/2024",
                                time: "14:30",
                                service: "Kh√°m t·ªïng qu√°t",
                                status: "completed",
                                notes: "C√° kh·ªèe m·∫°nh, kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ",
                            },
                        ],
                        healthRecords: [
                            {
                                id: 201,
                                date: "23/11/2024",
                                diagnosis: "Nhi·ªÖm k√Ω sinh tr√πng Ichthyophthirius",
                                treatment: "Thu·ªëc API Super Ich Cure, 5ml/10L n∆∞·ªõc",
                                notes: "C·∫ßn theo d√µi trong 1 tu·∫ßn, thay n∆∞·ªõc 30% m·ªói 2 ng√†y",
                            },
                            {
                                id: 202,
                                date: "10/09/2024",
                                diagnosis: "Vi√™m mang nh·∫π",
                                treatment: "Thu·ªëc API Melafix, 10ml/20L n∆∞·ªõc",
                                notes: "ƒê√£ kh·ªèi sau 5 ng√†y ƒëi·ªÅu tr·ªã",
                            },
                        ],
                    },
                    {
                        id: 2,
                        name: "Nguy·ªÖn Th·ªã Hoa",
                        phone: "0987654321",
                        email: "hoa.nguyen@gmail.com",
                        gender: "N·ªØ",
                        address: "456 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, Qu·∫≠n 3, TP.HCM",
                        registeredDate: "20/07/2023",
                        appointments: [
                            {
                                id: 103,
                                date: "24/11/2024",
                                time: "9:30",
                                service: "Kh√°m t·ªïng qu√°t",
                                status: "confirmed",
                                notes: "Ki·ªÉm tra ƒë·ªãnh k·ª≥",
                            },
                        ],
                        healthRecords: [
                            {
                                id: 203,
                                date: "15/08/2024",
                                diagnosis: "Kh·ªèe m·∫°nh",
                                treatment: "Kh√¥ng c·∫ßn ƒëi·ªÅu tr·ªã",
                                notes: "Ti·∫øp t·ª•c ch·∫ø ƒë·ªô dinh d∆∞·ª°ng hi·ªán t·∫°i",
                            },
                        ],
                    },
                    {
                        id: 3,
                        name: "Tr·∫ßn VƒÉn Minh",
                        phone: "0123456789",
                        email: "minhtran@gmail.com",
                        gender: "Nam",
                        address: "789 ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn, Qu·∫≠n 10, TP.HCM",
                        registeredDate: "05/03/2024",
                        appointments: [
                            {
                                id: 104,
                                date: "25/11/2024",
                                time: "14:00",
                                service: "ƒêi·ªÅu tr·ªã b·ªánh da",
                                status: "confirmed",
                                notes: "C√° c√≥ v·∫øt lo√©t tr√™n da, c·∫ßn ƒëi·ªÅu tr·ªã",
                            },
                        ],
                        healthRecords: [
                            {
                                id: 204,
                                date: "20/10/2024",
                                diagnosis: "B·ªánh n·∫•m da",
                                treatment: "Thu·ªëc API Fungus Cure, 5ml/10L n∆∞·ªõc",
                                notes: "C·∫ßn theo d√µi trong 2 tu·∫ßn",
                            },
                        ],
                    },
                ]

                setCustomers(sampleCustomers)

                // If ID is provided, select that customer
                if (id) {
                    const customer = sampleCustomers.find((c) => c.id === Number.parseInt(id))
                    if (customer) {
                        setSelectedCustomer(customer)
                        setEditedCustomer({ ...customer })
                    }
                } else if (sampleCustomers.length > 0) {
                    // Otherwise select the first customer
                    setSelectedCustomer(sampleCustomers[0])
                    setEditedCustomer({ ...sampleCustomers[0] })
                }
            } catch (error) {
                console.error("Error fetching customers:", error)
            } finally {
                setLoading(false)
            }
        }

        fetchCustomers()
    }, [id])

    const handleBackHome = () => {
        navigate("/")
    }

    const handleMenuClick = (itemId) => {
        setActiveTab(itemId)
        navigate(`/dashboard/doctor/${itemId}`)
    }

    const selectCustomer = (customer) => {
        setSelectedCustomer(customer)
        setEditedCustomer({ ...customer })
        setEditMode(false)
    }

    const handleEditToggle = () => {
        if (editMode) {
            // Save changes
            setSelectedCustomer({ ...editedCustomer })
            setCustomers((prev) => prev.map((c) => (c.id === editedCustomer.id ? { ...editedCustomer } : c)))
        }
        setEditMode(!editMode)
    }

    const handleInputChange = (e) => {
        const { name, value } = e.target
        setEditedCustomer((prev) => ({
            ...prev,
            [name]: value,
        }))
    }

    const filteredCustomers = customers.filter(
        (customer) =>
            customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            customer.phone.includes(searchTerm) ||
            customer.email.toLowerCase().includes(searchTerm.toLowerCase()),
    )

    const menuItems = [
        { id: "schedule", label: "L·ªãch l√†m vi·ªác", icon: "üìÖ" },
        { id: "appointments", label: "Xem cu·ªôc h·∫πn", icon: "üïê" },
        { id: "customers", label: "H·ªì s∆° b·ªánh nh√¢n", icon: "üë•" },
        { id: "records", label: "T·∫°o h·ªì s∆° b·ªánh √°n", icon: "üìã" },
        { id: "feedback", label: "Ph·∫£n h·ªìi kh√°ch h√†ng", icon: "üí¨" },
        { id: "profile", label: "H·ªì s∆° c√° nh√¢n", icon: "üë§" },
    ]

    // Get status badge
    const getStatusBadge = (status) => {
        switch (status) {
            case "confirmed":
                return <span className="status-badge confirmed">ƒê√£ x√°c nh·∫≠n</span>
            case "pending":
                return <span className="status-badge pending">Ch·ªù x√°c nh·∫≠n</span>
            case "completed":
                return <span className="status-badge completed">Ho√†n th√†nh</span>
            default:
                return <span className="status-badge pending">Ch·ªù x√°c nh·∫≠n</span>
        }
    }

    return (
        <div className="dashboard-container">
            {/* Sidebar */}
            <div className="sidebar">
                <div className="sidebar-header">
                    <div className="logo" onClick={handleBackHome}>
                        <img
                            src="https://storage.googleapis.com/tagjs-prod.appspot.com/v1/VY3PPTks6o/e8ggwzic_expires_30_days.png"
                            className="logo-image"
                            alt="EyeSpire Logo"
                        />
                        <span className="logo-text">EyeSpire</span>
                    </div>
                </div>

                <div className="sidebar-menu">
                    <ul>
                        {menuItems.map((item) => (
                            <li key={item.id} className={`menu-item ${activeTab === item.id ? "active" : ""}`}>
                                <button onClick={() => handleMenuClick(item.id)} className="menu-button">
                                    <span className="menu-icon">{item.icon}</span>
                                    <span className="menu-text">{item.label}</span>
                                </button>
                            </li>
                        ))}
                    </ul>
                </div>

                <div className="sidebar-footer">
                    <button className="logout-button">
                        <span className="logout-icon">‚Üê</span>
                        <span>ƒêƒÉng xu·∫•t</span>
                    </button>
                    <div className="copyright">¬© 2025 EyeSpire</div>
                </div>
            </div>

            {/* Main Content */}
            <div className="main-content">
                <header className="content-header">
                    <h1>H·ªì s∆° b·ªánh nh√¢n</h1>
                    <div className="search-container">
                        <div className="search-input-wrapper">
                            <Search size={20} className="search-icon" />
                            <input
                                type="text"
                                placeholder="T√¨m ki·∫øm b·ªánh nh√¢n (T√™n, SƒêT, Email...)"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="search-input"
                            />
                        </div>
                    </div>
                </header>

                <div className="customer-profile-container">
                    {/* Customer List */}
                    <div className="customer-list-container">
                        <div className="customer-list-header">
                            <h2>Danh s√°ch b·ªánh nh√¢n</h2>
                        </div>

                        <div className="customer-list">
                            {loading ? (
                                <div className="loading-message">ƒêang t·∫£i d·ªØ li·ªáu...</div>
                            ) : filteredCustomers.length === 0 ? (
                                <div className="empty-message">Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n</div>
                            ) : (
                                filteredCustomers.map((customer) => (
                                    <div
                                        key={customer.id}
                                        className={`customer-list-item ${selectedCustomer?.id === customer.id ? "active" : ""}`}
                                        onClick={() => selectCustomer(customer)}
                                    >
                                        <div className="customer-avatar">
                                            <User size={24} />
                                        </div>
                                        <div className="customer-list-info">
                                            <h3>{customer.name}</h3>
                                            <div className="customer-list-details">
                        <span>
                          <Phone size={14} />
                            {customer.phone}
                        </span>
                                                <span>
                          <Mail size={14} />
                                                    {customer.email}
                        </span>
                                            </div>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>

                    {/* Customer Details */}
                    {selectedCustomer ? (
                        <div className="customer-details-container">
                            <div className="customer-details-header">
                                <div className="customer-details-actions">
                                    <button className={`action-btn ${editMode ? "save-btn" : "edit-btn"}`} onClick={handleEditToggle}>
                                        {editMode ? (
                                            <>
                                                <Save size={16} />
                                                L∆∞u
                                            </>
                                        ) : (
                                            <>
                                                <Edit size={16} />
                                                Ch·ªânh s·ª≠a
                                            </>
                                        )}
                                    </button>
                                </div>
                            </div>

                            <div className="customer-details-tabs">
                                <button
                                    className={`tab-btn ${activeSection === "info" ? "active" : ""}`}
                                    onClick={() => setActiveSection("info")}
                                >
                                    Th√¥ng tin c√° nh√¢n
                                </button>
                                <button
                                    className={`tab-btn ${activeSection === "appointments" ? "active" : ""}`}
                                    onClick={() => setActiveSection("appointments")}
                                >
                                    L·ªãch s·ª≠ cu·ªôc h·∫πn ({selectedCustomer.appointments.length})
                                </button>
                                <button
                                    className={`tab-btn ${activeSection === "health" ? "active" : ""}`}
                                    onClick={() => setActiveSection("health")}
                                >
                                    H·ªì s∆° b·ªánh √°n ({selectedCustomer.healthRecords.length})
                                </button>
                            </div>

                            <div className="customer-details-content">
                                {/* Personal Information */}
                                {activeSection === "info" && (
                                    <div className="customer-info-section">
                                        <div className="info-grid">
                                            <div className="info-item">
                                                <label>H·ªç v√† t√™n:</label>
                                                {editMode ? (
                                                    <input
                                                        type="text"
                                                        name="name"
                                                        value={editedCustomer.name}
                                                        onChange={handleInputChange}
                                                        className="edit-input"
                                                    />
                                                ) : (
                                                    <span>{selectedCustomer.name}</span>
                                                )}
                                            </div>

                                            <div className="info-item">
                                                <label>Gi·ªõi t√≠nh:</label>
                                                {editMode ? (
                                                    <select
                                                        name="gender"
                                                        value={editedCustomer.gender}
                                                        onChange={handleInputChange}
                                                        className="edit-input"
                                                    >
                                                        <option value="Nam">Nam</option>
                                                        <option value="N·ªØ">N·ªØ</option>
                                                        <option value="Kh√°c">Kh√°c</option>
                                                    </select>
                                                ) : (
                                                    <span>{selectedCustomer.gender}</span>
                                                )}
                                            </div>

                                            <div className="info-item">
                                                <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                                {editMode ? (
                                                    <input
                                                        type="text"
                                                        name="phone"
                                                        value={editedCustomer.phone}
                                                        onChange={handleInputChange}
                                                        className="edit-input"
                                                    />
                                                ) : (
                                                    <span>{selectedCustomer.phone}</span>
                                                )}
                                            </div>

                                            <div className="info-item">
                                                <label>Email:</label>
                                                {editMode ? (
                                                    <input
                                                        type="email"
                                                        name="email"
                                                        value={editedCustomer.email}
                                                        onChange={handleInputChange}
                                                        className="edit-input"
                                                    />
                                                ) : (
                                                    <span>{selectedCustomer.email}</span>
                                                )}
                                            </div>

                                            <div className="info-item full-width">
                                                <label>ƒê·ªãa ch·ªâ:</label>
                                                {editMode ? (
                                                    <input
                                                        type="text"
                                                        name="address"
                                                        value={editedCustomer.address}
                                                        onChange={handleInputChange}
                                                        className="edit-input"
                                                    />
                                                ) : (
                                                    <span>{selectedCustomer.address}</span>
                                                )}
                                            </div>

                                            <div className="info-item">
                                                <label>Ng√†y ƒëƒÉng k√Ω:</label>
                                                <span>{selectedCustomer.registeredDate}</span>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Appointment History */}
                                {activeSection === "appointments" && (
                                    <div className="appointment-history-section">
                                        <div className="section-header">
                                            <h3>L·ªãch s·ª≠ cu·ªôc h·∫πn</h3>
                                            <button className="add-btn">
                                                <Plus size={16} />
                                                T·∫°o cu·ªôc h·∫πn m·ªõi
                                            </button>
                                        </div>

                                        <div className="appointment-list">
                                            {selectedCustomer.appointments.length === 0 ? (
                                                <div className="empty-message">Ch∆∞a c√≥ cu·ªôc h·∫πn n√†o</div>
                                            ) : (
                                                <table className="appointment-table">
                                                    <thead>
                                                    <tr>
                                                        <th>Ng√†y</th>
                                                        <th>Gi·ªù</th>
                                                        <th>D·ªãch v·ª•</th>
                                                        <th>Tr·∫°ng th√°i</th>
                                                        <th>Ghi ch√∫</th>
                                                        <th>Thao t√°c</th>
                                                    </tr>
                                                    </thead>
                                                    <tbody>
                                                    {selectedCustomer.appointments.map((appointment) => (
                                                        <tr key={appointment.id}>
                                                            <td>{appointment.date}</td>
                                                            <td>{appointment.time}</td>
                                                            <td>{appointment.service}</td>
                                                            <td>{getStatusBadge(appointment.status)}</td>
                                                            <td className="notes-cell">{appointment.notes}</td>
                                                            <td>
                                                                <div className="table-actions">
                                                                    <button className="table-action-btn">
                                                                        <Eye size={14} />
                                                                    </button>
                                                                    <button className="table-action-btn">
                                                                        <Edit size={14} />
                                                                    </button>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    ))}
                                                    </tbody>
                                                </table>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* Health Records */}
                                {activeSection === "health" && (
                                    <div className="health-records-section">
                                        <div className="section-header">
                                            <h3>H·ªì s∆° b·ªánh √°n</h3>
                                            <button className="add-btn">
                                                <Plus size={16} />
                                                Th√™m h·ªì s∆° m·ªõi
                                            </button>
                                        </div>

                                        <div className="health-records-list">
                                            {selectedCustomer.healthRecords.length === 0 ? (
                                                <div className="empty-message">Ch∆∞a c√≥ h·ªì s∆° b·ªánh √°n</div>
                                            ) : (
                                                selectedCustomer.healthRecords.map((record) => {
                                                    return (
                                                        <div key={record.id} className="health-record-card">
                                                            <div className="health-record-header">
                                                                <div className="health-record-date">
                                                                    <Calendar size={16} />
                                                                    <span>{record.date}</span>
                                                                </div>
                                                            </div>
                                                            <div className="health-record-body">
                                                                <div className="health-record-item">
                                                                    <label>Ch·∫©n ƒëo√°n:</label>
                                                                    <span>{record.diagnosis}</span>
                                                                </div>
                                                                <div className="health-record-item">
                                                                    <label>ƒêi·ªÅu tr·ªã:</label>
                                                                    <span>{record.treatment}</span>
                                                                </div>
                                                                <div className="health-record-item">
                                                                    <label>Ghi ch√∫:</label>
                                                                    <span>{record.notes}</span>
                                                                </div>
                                                            </div>
                                                            <div className="health-record-footer">
                                                                <button className="health-record-btn">
                                                                    <Edit size={14} />
                                                                    Ch·ªânh s·ª≠a
                                                                </button>
                                                                <button className="health-record-btn view">
                                                                    <Eye size={14} />
                                                                    Xem chi ti·∫øt
                                                                </button>
                                                            </div>
                                                        </div>
                                                    )
                                                })
                                            )}
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    ) : (
                        <div className="no-customer-selected">
                            <div className="no-selection-message">
                                <User size={48} />
                                <h3>Ch·ªçn b·ªánh nh√¢n ƒë·ªÉ xem th√¥ng tin chi ti·∫øt</h3>
                                <p>Ho·∫∑c th√™m b·ªánh nh√¢n m·ªõi b·∫±ng n√∫t "Th√™m b·ªánh nh√¢n"</p>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    )
}
